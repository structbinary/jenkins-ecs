Description: >
    This is an example of a long running ECS service that serves jenkins.

Parameters:

    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id

    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    DesiredCount:
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 1

    Listener:
        Description: The Application Load Balancer listener to register with
        Type: String

    Path:
        Description: The path to register with the Application Load Balancer
        Type: String
        Default: /

    AccountNumber:
         Description: Account number is needed for configuring ecs cluster, currently there is no way to look this up
         Type: String

    JenkinsPassword:
        Description: Jenkins password to Set
        Type: String

    RegionName:
        Type: String
        Description: Region name where the ecr is located

    RepositoryName:
        Description: ECR name where the jenkins image is located
        Type: String

    JenkinsTag:
        Description: Tag of the jenkins image
        Type: String

    SlaveTag:
        Description: Tag of the jenkins slave image
        Type: String


Resources:
    Service:
        Type: AWS::ECS::Service
        Properties:
            Cluster: !Ref Cluster
            Role: !Ref ServiceRole
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            DeploymentConfiguration:
               MaximumPercent: 100
               MinimumHealthyPercent: 0
            LoadBalancers:
                - ContainerName: "jenkins-service"
                  ContainerPort: 8080
                  TargetGroupArn: !Ref TargetGroup

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            TaskRoleArn: !Ref Taskrole
            ContainerDefinitions:
                - Name: jenkins-service
                  Essential: true
                  Image: !Sub ${AccountNumber}.dkr.ecr.${RegionName}.amazonaws.com/${RepositoryName}:${JenkinsTag}
                  Environment:
                     - Name: ECS_CLUSTER_ARN
                       Value: !Sub arn:aws:ecs:${RegionName}:${AccountNumber}:cluster/${Cluster}
                     - Name: JENKINS_PASSWORD
                       Value: !Ref JenkinsPassword
                     - Name: AWS_REGION
                       Value: !Ref RegionName
                     - Name: SLAVE_IMAGE
                       Value: !Sub ${AccountNumber}.dkr.ecr.${RegionName}.amazonaws.com/${RepositoryName}:${SlaveTag}
                     - Name: slaveName
                       Value: jnlp-slave

                  Memory: 2000
                  PortMappings:
                    - ContainerPort: 8080
                      HostPort: 8080
                    - ContainerPort: 50000
                      HostPort: 50000
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region


    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            Matcher:
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /login
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2

    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref Listener
            Priority: 2
            Conditions:
                - Field: path-pattern
                  Values:
                    - !Ref Path
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

    # This IAM Role grants the service access to register/unregister with the
    # Application Load Balancer (ALB). It is based on the default documented here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
    ServiceRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ecs-service-${AWS::StackName}
            Path: /
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                        "Action": [ "sts:AssumeRole" ]
                    }]
                }
            Policies:
                - PolicyName: !Sub ecs-service-${AWS::StackName}
                  PolicyDocument:
                    {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:AuthorizeSecurityGroupIngress",
                                    "ec2:Describe*",
                                    "ecs:UpdateService*",
                                    "ecs:*",
                                    "ecr:*",
                                    "ecs:UpdateService*",
                                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                    "elasticloadbalancing:Describe*",
                                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                    "elasticloadbalancing:DeregisterTargets",
                                    "elasticloadbalancing:DescribeTargetGroups",
                                    "elasticloadbalancing:DescribeTargetHealth",
                                    "elasticloadbalancing:RegisterTargets"
                                ],
                                "Resource": "*"
                        }]
                    }

    Taskrole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub jenkins-task-role-${AWS::StackName}
            Path: /
            AssumeRolePolicyDocument: |
                    {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Sid": "",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                              },
                              "Action": "sts:AssumeRole"
                            }
                          ]
                    }
            Policies:
                - PolicyName: !Sub ecs-service-${AWS::StackName}
                  PolicyDocument:
                    {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "ecs:*",
                                    "ecr:*"
                                ],
                                "Resource": "*"
                        }]
                    }
